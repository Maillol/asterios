components:
  schemas:
    Difficulty:
      description: An enumeration.
      enum:
      - easy
      - normal
      - hard
      title: Difficulty
    LevelSchema:
      description: The current level of game that are playing by a team member.
      properties:
        level:
          description: The current theme
          title: Level
          type: integer
        theme:
          description: The current level
          title: Theme
          type: string
      required:
      - theme
      - level
      title: LevelSchema
      type: object
    TeamMemberToCreateSchema:
      description: The parameters to create a new team member.
      properties:
        difficulty:
          allOf:
          - $ref: '#/components/schemas/Difficulty'
          default: easy
          description: The difficulty of set of puzzle.
        level:
          default: 1
          description: The starting level
          title: Level
          type: integer
        level_max:
          description: The last level.
          title: Level Max
          type: integer
        name:
          description: The name of the team member
          title: Name
          type: string
        theme:
          description: The theme of set of puzzle. It will be randomly chosen if is
            it not set by the user.
          title: Theme
          type: string
      required:
      - name
      title: TeamMemberToCreateSchema
      type: object
info:
  title: Asterios
  version: 1.0.0
openapi: 3.0.0
paths:
  /asterios/{team}/member/{team_member}:
    get:
      description: Return a member of team.
      parameters:
      - in: path
        name: team
        required: true
        schema:
          title: team
          type: string
      - in: path
        name: team_member
        required: true
        schema:
          title: team_member
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: After creation, the Team Member object embed a levels_obj
                  containing data about the current level.
                properties:
                  difficulty:
                    allOf:
                    - $ref: '#/components/schemas/Difficulty'
                    default: easy
                    description: The difficulty of set of puzzle.
                  level:
                    default: 1
                    description: The starting level
                    title: Level
                    type: integer
                  level_max:
                    description: The last level.
                    title: Level Max
                    type: integer
                  levels_obj:
                    $ref: '#/components/schemas/LevelSchema'
                  name:
                    description: The name of the team member
                    title: Name
                    type: string
                  theme:
                    description: The theme of set of puzzle. It will be randomly chosen
                      if is it not set by the user.
                    title: Theme
                    type: string
                required:
                - name
                - levels_obj
                title: ReturnedTeamMemberSchema
                type: object
          description: ''
  /asterios/{team}/member/{team_member}/puzzle:
    put:
      description: Get puzzle of current level. A new puzzle is generated for each
        request
      parameters:
      - in: path
        name: team
        required: true
        schema:
          title: team
          type: string
      - in: path
        name: team_member
        required: true
        schema:
          title: team_member
          type: string
      responses:
        '200':
          content: {}
          description: A question is generated and returned.
        '404':
          content: {}
          description: If the game or team member doesn't exist
  /asterios/{team}/member/{team_member}/solve:
    put:
      description: Try to solve the puzzle sending a response in the request body.
      parameters:
      - in: path
        name: team
        required: true
        schema:
          title: team
          type: string
      - in: path
        name: team_member
        required: true
        schema:
          title: team_member
          type: string
      responses:
        '201':
          content: {}
          description: The puzzle is solved.
        '404':
          content: {}
          description: If the game or team member doesn't exist
        '400':
          content: {}
          description: The puzzle isn't solved.
  /game-config:
    get:
      description: Return all created game.
      responses:
        '200':
          content:
            application/json:
              schema:
                items: &id001
                  description: The returned Game.
                  example:
                    duration: 10
                    state: ready
                    team: team-17
                    team_members:
                    - id: 2013
                      level: 1
                      level_max: 2
                      levels_obj:
                        level: 2
                        theme: laby
                      name: Toto
                  properties:
                    duration:
                      default: 1
                      description: The game duration in minute
                      title: Duration
                      type: integer
                    remaining:
                      description: The remaining time in minute
                      title: Remaining
                      type: integer
                    start_at:
                      description: The starting date
                      format: date-time
                      title: Start At
                      type: string
                    state:
                      description: The state of game can be "ready", "started" or
                        "stopped"
                      title: State
                      type: string
                    team:
                      description: The name of team
                      title: Team
                      type: string
                    team_members:
                      items:
                        $ref: '#/components/schemas/TeamMemberToCreateSchema'
                      title: Team Members
                      type: array
                    won_at:
                      description: The date of victory in ISO 8601 format
                      format: date-time
                      title: Won At
                      type: string
                  required:
                  - team
                  - team_members
                  - state
                  - start_at
                  - remaining
                  - won_at
                  title: ReturnedGameSchema
                  type: object
                type: array
          description: ''
    post:
      description: 'Create a new game, The game will be identified by the name of

        the team. Each game has one uniq team. when the game is created,

        you should start it using PUT request on `/game-config/{team}/start` route'
      requestBody:
        content:
          application/json:
            schema:
              description: The parameters to create a Game object.
              example:
                duration: 10
                team: team-17
                team_members:
                - name: Toto
              properties:
                duration:
                  default: 1
                  description: The game duration in minute
                  title: Duration
                  type: integer
                team:
                  description: The name of team
                  title: Team
                  type: string
                team_members:
                  items:
                    $ref: '#/components/schemas/TeamMemberToCreateSchema'
                  title: Team Members
                  type: array
              required:
              - team
              - team_members
              title: GameToCreateSchema
              type: object
      responses:
        '201':
          content:
            application/json:
              schema: *id001
          description: The game is created.
        '409':
          content: {}
          description: ''
  /game-config/{name}:
    delete:
      description: Delete a created game.
      parameters:
      - in: path
        name: name
        required: true
        schema:
          title: name
          type: string
      responses:
        '200':
          content: {}
          description: The game is deleted.
        '404':
          content:
            application/json:
              schema: &id002
                properties:
                  exception:
                    title: Exception
                    type: string
                  message:
                    title: Message
                    type: string
                required:
                - message
                - exception
                title: ErrorSchema
                type: object
          description: The game is not found.
    get:
      description: Get a game from the team name.
      parameters:
      - in: path
        name: name
        required: true
        schema:
          title: name
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: *id001
          description: Return the game.
        '404':
          content:
            application/json:
              schema: *id002
          description: The game is not found
  /game-config/{name}/add-member:
    put:
      description: Add a new team member to a game. The state of game must be ready.
      parameters:
      - in: path
        name: name
        required: true
        schema:
          title: name
          type: string
      requestBody:
        content:
          application/json:
            schema:
              description: The parameters to create a new team member.
              properties:
                difficulty:
                  allOf:
                  - $ref: '#/components/schemas/Difficulty'
                  default: easy
                  description: The difficulty of set of puzzle.
                level:
                  default: 1
                  description: The starting level
                  title: Level
                  type: integer
                level_max:
                  description: The last level.
                  title: Level Max
                  type: integer
                name:
                  description: The name of the team member
                  title: Name
                  type: string
                theme:
                  description: The theme of set of puzzle. It will be randomly chosen
                    if is it not set by the user.
                  title: Theme
                  type: string
              required:
              - name
              title: TeamMemberToCreateSchema
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: *id001
          description: The new member is added to the game.
        '404':
          content:
            application/json:
              schema: *id002
          description: The game does not exist.
        '409':
          content:
            application/json:
              schema: *id002
          description: The state of game do not allow to add a member.
  /game-config/{name}/start:
    put:
      description: Start a created game configuration selected by `name`.
      parameters:
      - in: path
        name: name
        required: true
        schema:
          title: name
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: *id001
          description: The game is started
        '404':
          content:
            application/json:
              schema: *id002
          description: ''
        '409':
          content:
            application/json:
              schema: *id002
          description: ''

